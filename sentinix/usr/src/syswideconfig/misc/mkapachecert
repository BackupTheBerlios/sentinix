#!/bin/sh
#
# mkapachecert - automatically creates a server certificate and server key.
# By Michel Blomgren for SENTINIX - http://sentinix.org
#
# This script is distributed under the GNU General Public License.
#

# set more secure umask
umask 0077

if [ ! "$1" = "-f" ]; then
    echo "usage: $0 -f"
    echo "...automatically creates and installs a SSL certificate and server key for the"
    echo "Apache HTTP server. It will overwrite any previous certificate."
    echo
    exit 1
fi

if [ "$TMPDIR" = "" ]; then
	TMPDIR="/tmp"
fi

TempDir="$TMPDIR/mkapachecert-$$"
CWD=`pwd`

echo
echo -e "\033[1;37mGenerating SSL certificates for the Apache webserver...\033[0m"
echo

if [ ! -d /root/certs ]; then
    mkdir -p /root/certs || exit 1
fi
mkdir -p $TempDir || exit 1
cd $TempDir

########## Generate sxssl.cf ###############################################

sxssl_fqdn=`hostname -f`
sxssl_domain=`hostname -d`
sxssl_hostname=`hostname`

if [ "$sxssl_hostname" = "" ]; then
    sxssl_hostname="unknown"
fi
if [ "$sxssl_domain" = "" ]; then
    sxssl_domain="$sxssl_hostname"
fi
if [ "$sxssl_fqdn" = "" ]; then
    sxssl_fqdn="$sxssl_hostname"
fi

cat <<EOF > sxssl.cf
[ req ]
default_bits		= 1024
default_keyfile		= keyfile.pem
distinguished_name	= req_distinguished_name
attributes		= req_attributes

x509_extensions = v3_ca
#string_mask = nombstr

prompt			= no
output_password		= sentinix

[ req_distinguished_name ]
C			= XX
ST			= SENTINIX
L			= $sxssl_fqdn
O			= $sxssl_domain
OU			= $sxssl_hostname
CN			= $sxssl_fqdn
emailAddress		= root@${sxssl_fqdn}

[ req_attributes ]
#challengePassword	= sentinix


[ v3_ca ]

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always
basicConstraints = CA:true
EOF

########## Generate sxssl_ca.cf ############################################

cat <<EOF > sxssl_ca.cf
[ req ]
default_bits		= 1024
default_keyfile		= keyfile.pem
distinguished_name	= req_distinguished_name
attributes		= req_attributes

x509_extensions = v3_ca
#string_mask = nombstr

prompt			= no
output_password		= sentinix

[ req_distinguished_name ]
C			= SE
ST			= SENTINIX
L			= SENTINIX
O			= SENTINIX Dynamic Certificate Authority
OU			= Autogenerated by mkapachecert
CN			= sentinix.org
emailAddress		= info@sentinix.org

[ req_attributes ]
#challengePassword	= sentinix


[ v3_ca ]

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always
basicConstraints = CA:true

[ ca ]
default_ca		= CA_own
[ CA_own ]
dir                     = .
certs                   = \$dir
new_certs_dir           = \$dir/ca.db.certs
database                = \$dir/ca.db.index
serial                  = \$dir/ca.db.serial
RANDFILE                = \$dir/ca.db.rand
certificate             = \$dir/ca.crt
private_key             = \$dir/ca.key
default_days            = 365
default_crl_days        = 30
default_md              = md5
preserve                = no
policy                  = policy_anything
[ policy_anything ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional
EOF

########## Clean up ########################################################

rm -rf ca.db.certs &&
mkdir ca.db.certs &&
echo '01' > ca.db.serial &&
echo -n "" > ca.db.index &&

###############################################################################
# CA generation

# generate rsa private key
openssl genrsa -out ca.key 1024 &&
# generate certificate request
openssl req -config sxssl_ca.cf -new -key ca.key -out ca.csr &&
# self-sign certificate (for 10 years)
openssl x509 -req -days 3650 -in ca.csr -signkey ca.key -out ca.crt &&

###############################################################################
# server cert generation

# generate rsa private key
openssl genrsa -out server.key 1024 &&
# generate certificate request
openssl req -config sxssl.cf -new -key server.key -out server.csr &&
# sign the certificate request with the CA's certificate (for 10 years)
openssl x509 -req -days 3650 -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt &&

## in case someone want's a self-signed certificate instead, here's how to do that:
## self-sign certificate (for 10 years)
#openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt &&

###############################################################################
# client cert generation

# generate rsa private key
openssl genrsa -out client.key 1024 &&
# generate certificate request
openssl req -config sxssl.cf -new -key client.key -out client.csr &&
# sign the client request with the CA's certificate (for 10 years)
openssl x509 -req -days 3650 -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt &&

# generate pkcs12 file (for import into Mozilla, MSIE, etc.)
openssl pkcs12 -export -name "SENTINIX" -passout pass:sentinix -clcerts -in client.crt -inkey client.key -out client.p12 &&

cp client.p12 /root/certs/sentinix_client.p12 &&
cp ca.crt /root/certs/cacert.pem &&
cp ca.key /root/certs/cakey.pem &&
cp server.crt /root/certs/server_cert.pem &&
cp server.key /root/certs/server_key.pem &&
cp server.csr /root/certs/server_req.pem &&

cp ca.crt /etc/apache/ssl.crt/ &&
cp server.crt /etc/apache/ssl.crt/ &&
cp server.key /etc/apache/ssl.key/ &&
cd $CWD &&
rm -rf $TempDir

if [ ! $? -eq 0 ]; then
	echo
	echo -ne "\033[1;31m$0 failed"!
	echo -e "\033[0m"
	echo
	cd $CWD
	rm -rf $TempDir
	exit 1
else
    echo
    echo -e "\033[0;32mApache SSL certificates generated successfully (CA, server and client)!\033[0m"

cat <<EOF

*******************************************************************************
The SENTINIX web-interface may only be accessed using SSLv3 client
authentication by default. You must import a PKCS#12 (Public-Key Cryptography
Standards) file into your SSL-enabled browser. This works flawlessly in
Mozilla 1.x+ and MSIE (only 6.x has been confirmed).

EOF

echo -e "\033[33m/root/README\033[0m contains more specific instructions"
echo -e "\033[33m/root/certs/sentinix_client.p12\033[0m - the PKCS#12 file"
echo
echo -e "The key file's master password is \"\033[31msentinix\033[0m\"."

cat <<EOF
*******************************************************************************"

Press RETURN when you are done reading...
EOF
    read junk
fi

exit
